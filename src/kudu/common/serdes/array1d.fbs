// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

namespace kudu.serdes;

// These represent one-dimensional arrays of a particular scalar type
// containing an arbitrary number of elements.
table Int8Array { values:[int8]; }
table UInt8Array { values:[uint8]; }
table Int16Array { values:[int16]; }
table UInt16Array { values:[uint16]; }
table Int32Array { values:[int32]; }
table UInt32Array { values:[uint32]; }
table Int64Array { values:[int64]; }
table UInt64Array { values:[uint64]; }
table FloatArray { values:[float32]; }
table DoubleArray { values:[float64]; }
table StringArray { values:[string]; }
table BinaryArray { values:[UInt8Array]; }

// A wrapper to represent one-dimensional arrays above under the umbrella
// of a single field.
union ScalarArray {
  Int8Array,
  UInt8Array,
  Int16Array,
  UInt16Array,
  Int32Array,
  UInt32Array,
  Int64Array,
  UInt64Array,
  FloatArray,
  DoubleArray,
  StringArray,
  BinaryArray
}

// This is to represent a one-dimensional array of a particular scalar type
// where some of the array's elements might be null/non-valid. The 'data'
// field is a placeholder for the array's elements, and the 'validity' field
// contains information on their validity/non-nullness: one bit per element
// in 'data'.  A set bit ('1') in the 'validity' field means 'non-null'
// (a.k.a. 'valid'), 'false' means 'null' (a.k.a. 'non-valid'). If all the
// elements in the 'data' field are non-null/valid, the 'validity' field
// may be empty or absent to optimize for memory/space.
table Content {
  data:ScalarArray;
  validity:[uint8];
}

root_type Content;
